Введение: что такое облачные технологии
Облачные технологии — это модель предоставления ИТ-ресурсов по сети по запросу.
Ресурсы объединяются в общий пул и быстро выделяются/освобождаются.
Оплата обычно происходит по факту потребления, без капитальных вложений.
Поставщик управляет инфраструктурой, клиент получает готовые сервисы.
Ключевая цель — гибкость, масштабируемость и скорость вывода решений.

//

Ключевые свойства облака (по общепринятой модели)
Самообслуживание по требованию без участия оператора.
Широкий сетевой доступ с разных типов устройств.
Пул общих ресурсов и динамическое перераспределение нагрузки.
Быстрая эластичность: масштабирование вверх/вниз за минуты.
Измеряемость: прозрачный учёт и биллинг потребления.

//

Сервисные модели: IaaS, PaaS, SaaS
IaaS: виртуальные машины, сети, хранилища — максимальная гибкость.
PaaS: управляемые платформы для запуска приложений и БД.
SaaS: готовые прикладные сервисы, доступные через веб/клиенты.
Выбор модели определяет границы ответственности клиента.
Чем выше уровень сервиса, тем меньше операционных задач у клиента.

//

Дополнительные модели: FaaS и CaaS
FaaS (серверлесс-функции): код исполняется по событиям, масштабируется автоматически.
CaaS: управляемые кластеры контейнеров и оркестраторы как сервис.
Обе модели снижают издержки на инфраструктуру и эксплуатацию.
Применимы для микросервисов, API, ETL, обработчиков событий.
Оплата часто поминутная/помиллисекундная за реальное выполнение.

//

Модели развертывания: публичное, частное, гибридное, сообщество
Публичное облако: ресурсы провайдера для множества клиентов.
Частное облако: изолированная среда для одной организации.
Гибрид: связка частных ресурсов с публичными сервисами.
Облако сообщества: совместная инфраструктура для родственных организаций.
На практике распространены мульти-облака и гибридные схемы.

//

Участники экосистемы облака
Потребитель облака: организация или команда, использующая сервис.
Провайдер облака: владелец и оператор сервисов/инфраструктуры.
Брокер: помогает выбирать, объединять и управлять услугами разных провайдеров.
Аудитор: независимая проверка безопасности, соответствия и качества.
Перевозчик: сеть/каналы связи между потребителем и провайдером.

//

География облака: регионы и зоны доступности
Регионы — географически обособленные площадки провайдера.
Зоны доступности — взаимно изолированные дата-центры внутри региона.
Размещение в нескольких зонах повышает отказоустойчивость.
Выбор региона влияет на задержки, стоимость и требования к данным.
Есть локальные/пограничные площадки для минимизации латентности.

//

Вычисления в облаке: виртуальные машины
Каталоги образов и разгон по шаблонам сокращают время ввода в строй.
Автомасштабирование поддерживает целевые метрики нагрузки.
Типы инстансов оптимизированы под CPU, память, хранение или GPU.
Снимки и группы масштабирования упрощают восстановление и обновления.
Интеграция с сетями и балансировщиками даёт гибкую топологию.

//

Контейнеры и оркестрация
Контейнеры упаковывают приложение с зависимостями единообразно.
Kubernetes автоматизирует развёртывание, масштабирование и обновления.
Декларативные манифесты и контроллеры обеспечивают повторяемость.
Сервисы, ингрессы и конфиги реализуют сетевую связность и управление.
Регистры образов и политики безопасности контролируют поставку.

//

Serverless: функции и управляемые события
Функции запускаются триггерами: HTTP, очереди, расписание, потоки.
Провайдер управляет масштабом и окружением выполнения.
Подходит для интеграций, ETL, back-end для мобильных/веб-сценариев.
Биллинг за время выполнения и количество вызовов.
Ограничения по холодному старту и длительности требуют учёта.

//

Хранение данных: объектное, блочное, файловое
Объектное хранилище — масштабируемые «бакеты» для неструктурированных данных.
Блочное — диски для ВМ и высокопроизводительных СУБД.
Файловое — общие шары для приложений и аналитики.
Классы хранения: частый доступ, редко используемые, архивные.
Политики жизненного цикла переводят объекты между классами автоматически.

//

Сети и подключение
Виртуальные частные сети изолируют адресные пространства.
Маршрутизация, ACL и группы безопасности контролируют доступ.
Балансировщики распределяют трафик и обеспечивают высокую доступность.
Подключение on-prem: VPN-туннели и выделенные каналы.
Пиринги и межоблачные соединения поддерживают гибрид/мульти-облако.

//

Управляемые базы данных
Реляционные БД с автоматическими бекапами и обновлениями.
NoSQL-семейства для ключ-значение, документы, графы и колонки.
Кластеры in-memory для кэшей и очередей.
Аналитические DWH и MPP-движки для витрин отчётности.
Масштабирование, репликации и шифрование управляются провайдером.

//

Аналитика и обработка потоков
Хранилища данных и «озёра» для больших объёмов.
Обработчики потоков и очереди для событийной интеграции.
Пакетные/стриминговые движки для ETL и ML-пайплайнов.
Каталоги данных и схемы повышают управляемость активов.
Поддержка lakehouse объединяет гибкость озера и управление DWH.

//

DevOps и инфраструктура как код
Шаблоны и декларативные IaC-инструменты описывают ресурсы.
CI/CD конвейеры автоматизируют сборку и выкатку релизов.
Контроль версий конфигураций обеспечивает трассируемость.
Промежуточные среды и канареечные релизы снижают риски.
Секреты и параметры управляются менеджерами конфигураций.

//

Наблюдаемость и эксплуатация
Логи, метрики и трассировки дают целостную картину работы.
Единые форматы телеметрии упрощают сбор и корреляцию сигналов.
Дашборды и алерты поддерживают SLO/ошибкобюджет.
Профилирование и семплинг помогают локализовать деградации.
Инциденты документируются пост-мортем отчётами для улучшений.

//

Безопасность и разделение ответственности
Провайдер отвечает за физическую инфраструктуру и гипервизоры.
Клиент отвечает за конфигурацию сервисов, ОС и данные.
Шифрование «в покое» и «в канале», управление ключами.
Минимальные привилегии, MFA и сегментация сетей.
Непрерывный аудит, журналирование и контроль изменений.

//

Стандарты и соответствие
Кодексы практик для облачной безопасности и приватности данных.
Матрицы облачных контролей помогают оценивать зрелость.
Сертификация провайдеров упрощает внешние проверки.
Политики хранения и удаления данных поддерживают регуляторику.
Артефакты соответствия доступны через центры отчётности провайдера.

//

Экономика облака
Модель «pay-as-you-go» и зарезервированные/спотовые ресурсы.
Классы хранения и политики жизненного цикла снижают затраты.
Показатели использования помогают выявлять простаивающие ресурсы.
Финансовая ответственность распределяется между командами.
Прозрачность потребления ускоряет управленческие решения.

//

Сценарии применения и краткие итоги
Типовые сценарии: веб/мобайл, аналитика и ML, интеграции, IoT, бэкапы/DR, медиа.
Отрасли: финансы, телеком, ритейл, производство, госсектор, здравоохранение, образование.
Преимущества: скорость, эластичность, глобальный охват, богатая экосистема сервисов.
Ограничения: требования к локализации, задержки сети, контроль затрат и вендор-лок-ин.
Облако — базовая платформа современной цифровой инфраструктуры.